#!/usr/bin/env python# -*- coding: UTF-8 -*-"""@author:Eric.xin""""""执行"""import osimport sysreload(sys)sys.setdefaultencoding("utf-8")parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))sys.path.append(parentdir)from Conf import d_configfrom Conf import s_configimport loggingimport timeimport threadingimport MySQLdb as mydbfrom t_thread import Threadpoolimport jsonfrom bin.source_data import SourceDBimport jsonLogger = logging.getLogger(__name__)BASE_DIR = os.path.dirname(__file__)os_path = os.path.join(BASE_DIR,'logs/')def get_dataall():    # 实例化S_db类,通过get_data方法获取查询的数据值    s = SourceDB(s_config.ip, s_config.user, s_config.pwd, s_config.db)    return s.get_data()class Dest_db(object):    """    定义基础类,用与连接数据库    """    def __init__(self, host, user, password, databases):        self.__Data = get_dataall()        # self.__Data={"user_id": [1845065221374976, 1845167028421632, 1845165841941504, 1845197237584896, 1845937913791488, 1845939761628160, 1845953944044544, 1845968077177856, 1845977669551104, 1845965118309376, 1845981543056384, 1845971305972736, 1845986152530944, 1846019664512000, 1845939364905984, 1846197010613248, 1846225357800448, 1845983165105152, 1846233056445440, 1846237055140864, 1846247388054528, 1846247492322304, 1846266559153152, 1846351297168384, 1846167923901440, 1846278932333568, 1847402777216000, 1847451942765568, 1847481692963840, 1847610285884416, 1847594894902272, 1847709810525184, 1848820424115200, 1849086168876032, 1849103695709184, 1845928499987456, 1851664457565184, 1851921032987648, 1853098504504320, 1853098712581120, 1853143106208768, 1853149006889984, 1853160487355392, 1853308216656896, 1853145067734016, 1854454162441216, 1854499406939136, 1854525592814592, 1854544017441792, 1854672600400896, 1854731002070016, 1854747773928448, 1854777094554624, 1854780078195712, 1854808909251584, 1854811153499136, 1854818608972800, 1854824702444544, 1854572709725184, 1856152623137792, 1856183370400768, 1856197749507072, 1856213676082176, 1856218757694464, 1856235162698752, 1856243149456384, 1853066959635456, 1859005541106688, 1870103471965184, 1874308190929920, 1878554007897088, 1874310812288000, 1878584094426112, 1855893175075840, 1882830759642112, 1846298087261184, 1882985268741120, 1882740003701760, 1883082172695552, 1883101255631872, 1883105883522048, 1883129054282752, 1870267102594048, 1883204624106496, 1884486627968000, 1884603612513280, 1884603636466688, 1884622925399040, 1884552459027456, 1885608999715840, 1885676652299264, 1885680907863040, 1885682542806016, 1885688064836608, 1885704546993152, 1885940778533888, 1885951693472768, 1886078019339264, 1886079075222528, 1886131882935296, 1886139735032832, 1886223428174848, 1886982467191808, 1887029066564608, 1887030817571840, 1887028558382080, 1887138722104320, 1887222773957632, 1887290469319680, 1887368454784000, 1887331713696768, 1887458474198016, 1887480461968384, 1887481207555072, 1887617058833408, 1887619720676352, 1887633522869248, 1887625097987072, 1887639446635520, 1887641242502144, 1887638161327104, 1887645527294976, 1887664814998528, 1887666256856064, 1887704044717056, 1887733226701824, 1887815975928832, 1887846714754048, 1895548050867200, 1895549617570816, 1895570265719808, 1895761706550272, 1895838722245632, 1895869731554304, 1895874729231360, 1895903846859776, 1895929877660672, 1895990037316608, 1896954905789440, 1897277460202496, 1887795057476608, 1897335620404224, 1898369646068736, 1899780059317248, 1902547136480256, 1902932609467392, 1902966115992576, 1903027874694144, 1904041392686080, 1903005274883072, 1905875568231424, 1907249519625216, 1907295799297024, 1907352716428288, 1907488674530304, 1907500791907328, 1898580354712576, 1913892782916608, 100, 1924198168626176, 1913913757516800, 1938460798075904, 1938467591980032, 1938467603301376, 1938484001375232, 1938530440512512, 1941034608149504, 1941032921236480, 1941106619728896, 1941148764374016, 1951158967010304], "ds_interest": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "ds_principal": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "freeze_amount": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1014, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 100000000, 0, 0, 0, 0], "available_amount": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 11100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4419, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9617, 0, 0, 101140, 0, 0, 0, 0, 0, 0, 0, 33215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41070, 0, 0, 0, 0, 0, 0, 0, 0, 11033, 15000, 42407, 10000, 0, 0, 0, 0, 0, 0, 66700, 0, 0, 0, 0, 0, 0, 0, 1000000, 0, 100, 0, 0, 0, 0, 0, 0, 0, 100000000, 0, 100000000, 100045000, 0], "reward": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}        try:            self.host = host            self.user = user            self.password = password            self.databases = databases        except Exception, e:            print e,            logging.basicConfig(level=logging.INFO, filename='dest_connet.log',                                format='%(asctime)s  %(message)s')            logging.info(u"未连接到更新数据库")    # 获取用户id,user_id    def get_user_id(self):        user_id_list = list()        for i in self.__Data['user_id']:            user_id_list.append(i)        return user_id_list    # 获取可用余额    available_amount    def get_available_amount(self):        available_amount_list = list()        for i in self.__Data['available_amount']:            available_amount_list.append(i)        return available_amount_list    # 获取冻结金额     freeze_amount    def get_freeze_amount(self):        freeze_amount_list = list()        for i in self.__Data['freeze_amount']:            freeze_amount_list.append(i)        return freeze_amount_list    # 获取待收本金     ds_principal    def get_ds_principal(self):        ds_principal_list = list()        for i in self.__Data['ds_principal']:            ds_principal_list.append(i)        return ds_principal_list    # 获取待收收益     ds_interest    def get_ds_interest(self):        ds_interest_list = list()        for i in self.__Data['ds_interest']:            ds_interest_list.append(i)        return ds_interest_list    # 获取奖励金额     reward    def get_reward(self):        reward_list = list()        for i in self.__Data['reward']:            reward_list.append(i)        return reward_list    # /*更新银谷在线用户的可用余额户*/*    def up_WeiChuJieHu(self, connect):        count = 0        db_conet = connect        cursor = db_conet.cursor()        for k in xrange(len(self.__Data['available_amount'])):            count += 1            print "up_wei_chu_jie: %s" % str(count)            available_amount = self.__Data['available_amount'][k]            user_id = self.__Data['user_id'][k]            sql = "update ledgers_entity, customer_business_entity " \                  "set ledgers_entity.amount =%s  where ledgers_entity.ledger_code = 'WeiChuJieHu' AND " \                  "ledgers_entity.customer_business_id = customer_business_entity.id and " \                  "customer_business_entity.application_id = 'YGONLINE' AND " \                  "customer_business_entity.user_id ='%s'" % (float(available_amount), str(user_id))            logging.basicConfig(level=logging.INFO, filename='update_all.log', format='%(asctime)s  %(message)s')            logging.basicConfig(level=logging.INFO, filename='erro.log', format='%(asctime)s  %(message)s')            try:                try:                    # print u'可用余额:%s user_id:%s sql:%s' % (                    #     available_amount,                    #     user_id,                    #     sql,                    # )                    logging.info(u"可用余额:%s user_id:%s sql:%s %d数据 " % (available_amount,user_id,sql, int(count)))                    cursor.execute(sql)                except Warning as e:                    pass                except Exception as e:                    print e,                    logging.basicConfig(level=logging.INFO, filename='erro.log', format='%(asctime)s  %(message)s')                    logging.info(str(e))                    logging.error(u'可用余额:%s user_id:%s sql:%s' % (                        available_amount,                        user_id,                        sql,                    ))            except Exception as e:                logging.basicConfig(level=logging.ERROR, filename='erro.log',format='%(asctime)s  %(message)s')                logging.error(u"可用余额户:%s"%e)                logging.error(u'可用余额:%s user_id:%s sql:%s' % (                    available_amount,                    user_id,                    sql,                ))            finally:                pass        db_conet.commit()    # /*更新银谷在线用户的待付本金户*/ *    def up_DaiFuBenJinHu(self, connect):        count = 0        db_conet = connect        cursor = db_conet.cursor()        for k in xrange(len(self.__Data['ds_principal'])):            count += 1            print "up_dai_fu_ben_jin: %s" % str(count)            ds_principal = self.__Data['ds_principal'][k]            # print "---------",available_amount,count            user_id = self.__Data['user_id'][k]            # print "=========",user_id            sql = "update ledgers_entity,customer_business_entity" \                  " set ledgers_entity.amount=%s where ledgers_entity.ledger_code='DaiFuBenJinHu' AND " \                  "ledgers_entity.customer_business_id=customer_business_entity.id  and " \                  "customer_business_entity.application_id='YGONLINE' AND " \                  "customer_business_entity.user_id='%s'" % (float(ds_principal), str(user_id))            logging.basicConfig(level=logging.INFO, filename='update_all.log', format='%(asctime)s  %(message)s')            logging.basicConfig(level=logging.INFO, filename='erro.log', format='%(asctime)s  %(message)s')            try:                try:                    # print u'待付本金:%s user_id:%s sql:%s' % (                    #     ds_principal,                    #     user_id,                    #     sql                    # )                    logging.info(u"待付本金:%s user_id:%s sql:%s %d数据 " % (ds_principal, user_id, sql, int(count)))                    cursor.execute(sql)                except Warning as e:                    pass                except Exception as e:                    print e,                    logging.basicConfig(level=logging.INFO, filename='erro.log', format='%(asctime)s  %(message)s')                    logging.info('%s' % e)                    logging.error(u'待付本金:%s user_id:%s sql:%s' % (                        ds_principal,                        user_id,                        sql                    ))            except Exception as e:                logging.basicConfig(level=logging.ERROR, filename='erro.log', format='%(asctime)s  %(message)s')                logging.error(u"待付本金-%s" % e)                logging.error(u'待付本金:%s user_id:%s sql:%s' % (                    ds_principal,                    user_id,                    sql                ))            finally:                pass        db_conet.commit()    # /*更新银谷在线用户的代付利息*/*    def up_DaiFuLiXiHu(self, connect):        count = 0        db_conet = connect        cursor = db_conet.cursor()        for k in xrange(len(self.__Data['ds_interest'])):            count += 1            print "up_dai_fu_li_xi: %s" % str(count)            ds_interest = self.__Data['ds_interest'][k]            print ds_interest,"---"            # print "---------",available_amount,count            user_id = self.__Data['user_id'][k]            # print "=========",user_id            sql = "update ledgers_entity,customer_business_entity" \                  " set ledgers_entity.amount=%s where ledgers_entity.ledger_code='DaiFuLiXiHu' AND " \                  "ledgers_entity.customer_business_id=customer_business_entity.id  and " \                  "customer_business_entity.application_id='YGONLINE' AND " \                  "customer_business_entity.user_id='%s'" % (float(ds_interest), str(user_id))            logging.basicConfig(level=logging.INFO, filename='update_all.log', format='%(asctime)s  %(message)s')            logging.basicConfig(level=logging.INFO, filename='erro.log', format='%(asctime)s  %(message)s')            try:                try:                    # print u'待付利息:%s user_id:%s sql:%s' % (                    #     ds_interest,                    #     user_id,                    #     sql                    # )                    logging.info(u"待付利息:%s user_id:%s sql:%s %d数据 " % (ds_interest, user_id, sql, int(count)))                    cursor.execute(sql)                except Warning as e:                    pass                except Exception as e:                    print e,                    logging.basicConfig(level=logging.INFO, filename='erro.log', format='%(asctime)s  %(message)s')                    logging.info('%s' % e)                    logging.error(u'待付利息:%s user_id:%s sql:%s' % (                        ds_interest,                        user_id,                        sql                    ))            except Exception as e:                logging.basicConfig(level=logging.ERROR, filename='erro.log', format='%(asctime)s  %(message)s')                logging.error(u"待付利息-%s" % e)                logging.error(u'待付利息:%s user_id:%s sql:%s' % (                    ds_interest,                    user_id,                    sql                ))            finally:                pass        db_conet.commit()    # /*更新银谷在线用户的营销户,奖励*/    def up_YingXiaoHu(self, connect):        count = 0        db_conet = connect        cursor = db_conet.cursor()        for k in xrange(len(self.__Data['reward'])):            count += 1            print "up_ying_xiao: %s" % str(count)            reward = self.__Data['reward'][k]            # print "---------",available_amount,count            user_id = self.__Data['user_id'][k]            # print "=========",user_id            sql = "update ledgers_entity,customer_business_entity" \                  " set ledgers_entity.amount=%s where ledgers_entity.ledger_code='YingXiaoHu' AND " \                  "ledgers_entity.customer_business_id=customer_business_entity.id  and " \                  "customer_business_entity.application_id='YGONLINE' AND " \                  "customer_business_entity.user_id='%s'" % (float(reward), str(user_id))            logging.basicConfig(level=logging.INFO, filename='update_all.log', format='%(asctime)s  %(message)s')            # logging.info(u"营销用户 %s %d条数据 " % (available_amount, int(count)))            # logging.info(u"用户id %s %d条数据" % (user_id, int(count)))            logging.basicConfig(level=logging.INFO, filename='erro.log', format='%(asctime)s  %(message)s')            try:                try:                    # print u'营销用户:%s user_id:%s sql:%s' % (                    #     reward,                    #     user_id,                    #     sql                    # )                    logging.info(u"营销用户:%s user_id:%s sql:%s %d数据 " % (reward, user_id, sql, int(count)))                    cursor.execute(sql)                except Warning as e:                    pass                except Exception as e:                    print e,                    logging.basicConfig(level=logging.INFO, filename='erro.log', format='%(asctime)s  %(message)s')                    logging.info('%s' % e)                    logging.error(u'营销用户:%s user_id:%s sql:%s' % (                        reward,                        user_id,                        sql                    ))            except Exception as e:                logging.basicConfig(level=logging.ERROR, filename='erro.log', format='%(asctime)s  %(message)s')                logging.error(u"营销用户:%s" % e)                logging.error(u'营销用户:%s user_id:%s sql:%s' % (                    reward,                    user_id,                    sql                ))            finally:                pass        db_conet.commit()    # / *更新银谷在线用户的提现冻结户 * /    def up_TiXianHu(self, connect):        count = 0        db_conet = connect        cursor = db_conet.cursor()        for k in xrange(len(self.__Data['freeze_amount'])):            count += 1            print "up_ti_xian: %s" % str(count)            freeze_amount = self.__Data['freeze_amount'][k]            # print "---------",available_amount,count            user_id = self.__Data['user_id'][k]            # print "=========",user_id            sql = "update ledgers_entity,customer_business_entity" \                  " set ledgers_entity.amount=%s where ledgers_entity.ledger_code='TiXianHu' AND " \                  "ledgers_entity.customer_business_id=customer_business_entity.id  and " \                  "customer_business_entity.application_id='YGONLINE' AND " \                  "customer_business_entity.user_id='%s'" % (float(freeze_amount), str(user_id))            logging.basicConfig(level=logging.INFO, filename='update_all.log', format='%(asctime)s  %(message)s')            #logging.info(u"冻结提现用户 %s %d条数据 " % (available_amount, int(count)))            #logging.info(u"用户id %s %d条数据" % (user_id, int(count)))            # print u"可用余额", available_amount, count            # print u"用户id", user_id, count            logging.basicConfig(level=logging.INFO, filename='erro.log', format='%(asctime)s  %(message)s')            try:                try:                    # print u'冻结提现用户:%s user_id:%s sql:%s' % (                    #     freeze_amount,                    #     user_id,                    #     sql                    # )                    logging.info(u"冻结提现用户:%s user_id:%s sql:%s %d数据 " % (freeze_amount, user_id, sql, int(count)))                    cursor.execute(sql)                except Warning as e:                    pass                except Exception as e:                    print e,                    logging.basicConfig(level=logging.INFO, filename='erro.log', format='%(asctime)s  %(message)s')                    logging.info('%s' % e)                    logging.error(u'冻结体现用户:%s user_id:%s sql:%s' % (                        freeze_amount,                        user_id,                        sql                    ))            except Exception as e:                logging.basicConfig(level=logging.ERROR, filename='erro.log', format='%(asctime)s  %(message)s')                logging.error(u"冻结体现用户:%s" % e)                logging.error(u'冻结体现:%s user_id:%s sql:%s' % (                    freeze_amount,                    user_id,                    sql                ))            finally:                pass        db_conet.commit()pool = Threadpool()def run(task, pool):    t = pool.get_thread()    obj = t(target=task, args=())    obj.start()if __name__ == "__main__":    d = Dest_db(d_config.ip, d_config.user, d_config.pwd, d_config.db)    #多线程    #run(d.up_wei_chu_jie, pool)    #run(d.up_dai_fu_ben_jin, pool)    #run(d.up_dai_fu_li_xi, pool)    #run(d.up_ti_xian(),pool)    #run(d.up_ying_xiao, pool)    """#"""    #单线程方    # MySQL.connect(self.host, self.user, self.password, self.databases)    connect = mydb.connect(d_config.ip, d_config.user, d_config.pwd, d_config.db)    print connect    d.up_WeiChuJieHu(connect=connect)    d.up_DaiFuBenJinHu(connect=connect)    d.up_DaiFuLiXiHu(connect=connect)    d.up_TiXianHu(connect=connect)    d.up_YingXiaoHu(connect=connect)    connect.close()